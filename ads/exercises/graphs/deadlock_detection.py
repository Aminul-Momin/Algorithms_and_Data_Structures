"""
High performance database systems use multiple processes and resource locking. These systemsmay not provide mechanisms to avoid or prevent deadlock a situation in which two or morecompeting actions are each waiting for the other to finish, which precludes all these actions fromprogressing. Such systems must support a mechanism to detect deadlocks, as well as an algorithmfor recovering from them.One deadlock detection algorithm makes use of a "wait-for" graph to track which other processesa Process is currently blocking on. In a wait-for graph, processes are represented as nodes, and anedge from Process P to Q implies Q is holding a resource that P needs and thus P is waiting for Qto release its lock on that resource. A cycle in this graph implies the possibility of a deadlock. Thismotivates the following problem.Write a program that takes as input a directed graph and checks if the graph contains a cycle.Hint:Focus on "back" edges.
"""